import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.DhOcDEr8.js";const d=JSON.parse('{"title":"代码高亮","description":"","frontmatter":{},"headers":[],"relativePath":"build/code-highlight.md","filePath":"build/code-highlight.md"}'),h={name:"build/code-highlight.md"};function t(p,s,e,k,r,g){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="代码高亮" tabindex="-1">代码高亮 <a class="header-anchor" href="#代码高亮" aria-label="Permalink to &quot;代码高亮&quot;">​</a></h1><p>由于代码种类非常之多，我只能在尽量少的脚本大小情况下，支持常见的一些代码类型，但是并不是所有的代码类型我都支持，如果你需要高亮的代码刚好不在支持范围内，可以通过自己构建的方式，引入对应的代码高亮支持，然后构建自己的主题。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>采用的 highlight.js 实现的代码高亮</p></div><h2 id="支持的代码类型" tabindex="-1">支持的代码类型 <a class="header-anchor" href="#支持的代码类型" aria-label="Permalink to &quot;支持的代码类型&quot;">​</a></h2><ul><li>bash</li><li>c</li><li>csharp</li><li>cpp</li><li>css</li><li>go</li><li>xml</li><li>json</li><li>java</li><li>javascript</li><li>less</li><li>markdown</li><li>php</li><li>phpTemplate</li><li>python</li><li>pythonRepl</li><li>rust</li><li>scss</li><li>sql</li><li>shell</li><li>typescript</li><li>webAssembly</li><li>yaml</li><li>http</li><li>nginx</li><li>apache</li><li>dockerfile</li></ul><h2 id="加入需要的代码高亮" tabindex="-1">加入需要的代码高亮 <a class="header-anchor" href="#加入需要的代码高亮" aria-label="Permalink to &quot;加入需要的代码高亮&quot;">​</a></h2><p>找到脚本文件：<code>/src/modules/article_content/hljs.ts</code></p><p>import 引入你需要的语言类型，然后在<code>languages</code>对象中加入引入的类型，重新打包主题即可使用。</p><p><strong>例：</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hljs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;highlight.js/lib/core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;highlight.js/lib/languages/bash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { LanguageFn } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;highlight.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Languages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LanguageFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> languages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Languages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bash,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//批量注册</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(languages).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  hljs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerLanguage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, languages[name]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hljs;</span></span></code></pre></div>`,10)]))}const o=i(h,[["render",t]]);export{d as __pageData,o as default};
